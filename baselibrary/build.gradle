apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // 打包 文件位置
//    applicationVariants.all {
//        //判断是release还是debug版本
//        def buildType = it.buildType.name
//        def fileName
//        //获取当前时间的"YYYY-MM-dd"格式。
//        def createTime = new Date().format("YYYY-MM-dd-HH-mm", TimeZone.getTimeZone("GMT+08:00"))
//        //只对Release包起作用，如果不是Release包则不变更输出路径，否则可能导致AS无法自动安装debug包。
////        if (buildType == "release") {
//////            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks/${createTime}")
////        }
//        it.outputs.each {
//            //只对Release包起作用，如果不是Release包则不变更名称。
//            if (buildType == "release") {
//                def path = "${rootProject.rootDir}/apk/" + it.name.toString()
//                //这里修改apk文件名 命名规则：meinuo_版本号_版本名_时间.apl
//                fileName = "meinuo_${defaultConfig.versionCode}_v${defaultConfig.versionName}_${createTime}.apk"
//                //可以通过这个方法修改输出文件名
//                it.outputFile = new File(path, fileName)
//            }
//        }
//    }
    /*打jar包*/
    def SDK_BASENAME = "melon";
    def SDK_VERSION = "_v1.0";
    def sdkDestinationPath = "build/outputs/jar/";  // 生成jar包的位置
    def zipFile = file('build/intermediates/bundles/default/classes.jar') //待打包文件位置

    task deleteBuild(type: Delete) {
        delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
    }

    task makeJar(type: Jar) {
        from zipTree(zipFile) //这行表示要打包的文件的路径，根据下面的内容，其实是该路径下的classes.jar
        from fileTree(dir: 'src/main', includes: ['assets/**']) // 打包assets目录下的所有文件
        baseName = SDK_BASENAME + SDK_VERSION
        exclude('test/', 'BuildConfig.class', 'R.class')
        destinationDir = file(sdkDestinationPath)
    }
    makeJar.dependsOn(deleteBuild, build)
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.squareup.okhttp3:okhttp:3.10.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.2'
    compile 'io.reactivex.rxjava2:rxjava:2.0.2'
    compile 'com.squareup.retrofit2:retrofit:2.4.0'
    compile 'com.squareup.retrofit2:converter-gson:2.4.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    compile 'com.badoo.mobile:android-weak-handler:1.1'
    testCompile 'junit:junit:4.12'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.jakewharton:disklrucache:2.0.2'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.alibaba:fastjson:1.1.70.android'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:support-annotations:26.1.0'
    compile 'net.danlew:android.joda:2.9.5'
}
